// calibrate function
void calibrate(){
  int32_t AcX_raw = 0;
  int32_t AcY_raw = 0;
  int32_t AcZ_raw = 0;
  int32_t Tmp_raw = 0;
  int32_t GyX_raw = 0;
  int32_t GyY_raw = 0;
  int32_t GyZ_raw = 0;
  Serial.println("Calibrating... DON'T MOVE");
  for (int i = 0; i<1000; i ++) {
    Wire.beginTransmission(MPU_addr);
    Wire.write(0x3B);
    Wire.endTransmission(false); 
    Wire.requestFrom(MPU_addr,7*2,true); 
    AcX_raw += Wire.read()<<8 | Wire.read();
    AcY_raw += Wire.read()<<8 | Wire.read();
    AcZ_raw += Wire.read()<<8 | Wire.read();
    Tmp_raw += Wire.read()<<8 | Wire.read();
    GyX_raw += Wire.read()<<8 | Wire.read();
    GyY_raw += Wire.read()<<8 | Wire.read();
    GyZ_raw += Wire.read()<<8 | Wire.read();
    delay(5);
  }

  // average over iterations...
  offset[0] = AcX_raw / 1000.0;
  offset[1] = AcY_raw / 1000.0;
  offset[2] = AcZ_raw / 1000.0;
  offset[3] = Tmp_raw / 1000.0;
  offset[4] = GyX_raw / 1000.0;
  offset[5] = GyY_raw / 1000.0;
  offset[6] = GyZ_raw / 1000.0;

}

// function takes offsets and reads
// MPU-data

MPUData get_MPU_data(float offset[7]) {
  Wire.beginTransmission(MPU_addr);
  Wire.write(0x3B); // get x-vals
  Wire.endTransmission(false); // don't end
  // request 14 registers (2 each)
  // all at adjacent positions
  Wire.requestFrom(MPU_addr,7*2,true); 

  int16_t AcX_raw = Wire.read()<<8 | Wire.read();
  int16_t AcY_raw = Wire.read()<<8 | Wire.read();
  int16_t AcZ_raw = Wire.read()<<8 | Wire.read();

  int16_t Tmp_raw = Wire.read()<<8 | Wire.read();

  int16_t GyX_raw = Wire.read()<<8 | Wire.read();
  int16_t GyY_raw = Wire.read()<<8 | Wire.read();
  int16_t GyZ_raw = Wire.read()<<8 | Wire.read();

  // converting
  float Tmp = (float)Tmp_raw; //- offset[3] ;
  float AcX = (float)((AcX_raw-offset[0])/4096.0);
  float AcY = (float)((AcY_raw-offset[1])/4096.0);
  float AcZ = (float)((AcZ_raw-offset[2])/4096.0);

  float GyX = (float)((GyX_raw-offset[4]) / 65.5);
  float GyY = (float)((GyY_raw-offset[5]) / 65.5);
  float GyZ = (float)((GyZ_raw-offset[6])/ 65.5);

  return {AcX,AcY,AcZ,Tmp,GyX,GyY,GyZ};

}


void readMacAddress(){
  uint8_t baseMac[6];
  esp_err_t ret = esp_wifi_get_mac(WIFI_IF_STA, baseMac);
  if (ret == ESP_OK) {
    Serial.printf("%02x:%02x:%02x:%02x:%02x:%02x\n",
                  baseMac[0], baseMac[1], baseMac[2],
                  baseMac[3], baseMac[4], baseMac[5]);
  } else {
    Serial.println("Failed to read MAC address");
  }
}

// sending/receiving data
// callback when data is sent

// give mac address and get status when packets sent
void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  Serial.print("\r\nLast Packet Send Status:\t");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Delivery Success" : "Delivery Fail");
}


// processing data
// It is the sensors job to actually process the 
// data received from the sensor, and convert it.
// based on integrated angle, write to servo.

// take previous time, does function, returns integral over 1s
MPUData get_integrated_pos(float offset[7]) {
  float delta_time = float(1.0/250.0); // needs to be float!
  MPUData new_data;

  new_data = get_MPU_data(offset);
  new_data = new_data*delta_time; // adjust by change!

  return new_data; // add to current counter...

}


